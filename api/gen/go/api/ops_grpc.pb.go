// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpsServiceClient is the client API for OpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpsServiceClient interface {
	ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...grpc.CallOption) (*ListRepositoryRes, error)
	GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...grpc.CallOption) (*Repository, error)
	DelRepository(ctx context.Context, in *DelRepositoryReq, opts ...grpc.CallOption) (*Empty, error)
	PutRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*PutRepositoryRes, error)
	UpdateRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Empty, error)
}

type opsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpsServiceClient(cc grpc.ClientConnInterface) OpsServiceClient {
	return &opsServiceClient{cc}
}

func (c *opsServiceClient) ListRepository(ctx context.Context, in *ListRepositoryReq, opts ...grpc.CallOption) (*ListRepositoryRes, error) {
	out := new(ListRepositoryRes)
	err := c.cc.Invoke(ctx, "/api.OpsService/ListRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsServiceClient) GetRepository(ctx context.Context, in *GetRepositoryReq, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/api.OpsService/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsServiceClient) DelRepository(ctx context.Context, in *DelRepositoryReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.OpsService/DelRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsServiceClient) PutRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*PutRepositoryRes, error) {
	out := new(PutRepositoryRes)
	err := c.cc.Invoke(ctx, "/api.OpsService/PutRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsServiceClient) UpdateRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.OpsService/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpsServiceServer is the server API for OpsService service.
// All implementations must embed UnimplementedOpsServiceServer
// for forward compatibility
type OpsServiceServer interface {
	ListRepository(context.Context, *ListRepositoryReq) (*ListRepositoryRes, error)
	GetRepository(context.Context, *GetRepositoryReq) (*Repository, error)
	DelRepository(context.Context, *DelRepositoryReq) (*Empty, error)
	PutRepository(context.Context, *Repository) (*PutRepositoryRes, error)
	UpdateRepository(context.Context, *Repository) (*Empty, error)
	mustEmbedUnimplementedOpsServiceServer()
}

// UnimplementedOpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpsServiceServer struct {
}

func (UnimplementedOpsServiceServer) ListRepository(context.Context, *ListRepositoryReq) (*ListRepositoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepository not implemented")
}
func (UnimplementedOpsServiceServer) GetRepository(context.Context, *GetRepositoryReq) (*Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedOpsServiceServer) DelRepository(context.Context, *DelRepositoryReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRepository not implemented")
}
func (UnimplementedOpsServiceServer) PutRepository(context.Context, *Repository) (*PutRepositoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRepository not implemented")
}
func (UnimplementedOpsServiceServer) UpdateRepository(context.Context, *Repository) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedOpsServiceServer) mustEmbedUnimplementedOpsServiceServer() {}

// UnsafeOpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpsServiceServer will
// result in compilation errors.
type UnsafeOpsServiceServer interface {
	mustEmbedUnimplementedOpsServiceServer()
}

func RegisterOpsServiceServer(s grpc.ServiceRegistrar, srv OpsServiceServer) {
	s.RegisterService(&OpsService_ServiceDesc, srv)
}

func _OpsService_ListRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).ListRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OpsService/ListRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).ListRepository(ctx, req.(*ListRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpsService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OpsService/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).GetRepository(ctx, req.(*GetRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpsService_DelRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).DelRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OpsService/DelRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).DelRepository(ctx, req.(*DelRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpsService_PutRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).PutRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OpsService/PutRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).PutRepository(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpsService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OpsService/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServiceServer).UpdateRepository(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

// OpsService_ServiceDesc is the grpc.ServiceDesc for OpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.OpsService",
	HandlerType: (*OpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepository",
			Handler:    _OpsService_ListRepository_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _OpsService_GetRepository_Handler,
		},
		{
			MethodName: "DelRepository",
			Handler:    _OpsService_DelRepository_Handler,
		},
		{
			MethodName: "PutRepository",
			Handler:    _OpsService_PutRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _OpsService_UpdateRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ops.proto",
}
