syntax = "proto3";

package api;

option go_package = "github.com/hatlonely/rpc-ops/api/gen/go/api";

import "google/api/annotations.proto";

message Empty {}

message Repository {
  string id = 1;
  string username = 2;
  string password = 3;
  string endpoint = 4;
  string team = 5;
  string name = 6;
  string playbook = 7;
  string createAt = 8;
  string updateAt = 9;
}

message RepositoryID {
  string id = 1;
}

message ListRepositoryReq {
  int32 offset = 1;
  int32 limit = 2;
}

message ListRepositoryRes {
  repeated Repository repositories = 1;
}

message Job {
  string id = 1;
  int32 seq = 2;
  string state = 3;
  string repositoryID = 4;
  string variableID = 5;
  string version = 6;
  string createAt = 7;
  string updateAt = 8;
  string scheduleAt = 9;
  int32 elapseSeconds = 10;
  string output = 11;
}

message JobID {
  string id = 1;
}

message ListJobReq {
  string repositoryID = 1;
  int32 offset = 2;
  int32 limit = 3;
}

message ListJobRes {
  repeated Job jobs = 1;
}

message Variable {
  string id = 1;
  string name = 2;
  string body = 3;
  string createAt = 4;
  string updateAt = 5;
}

message VariableID {
  string id = 1;
}

message ListVariableReq {
  int32 offset = 2;
  int32 limit = 3;
}

message ListVariableRes {
  repeated Variable variables = 1;
}

message DescribeRepositoryReq {
  string id = 1;
  string version = 2;
}

message Playbook {
  message Env {
    string key = 1;
    map<string, string> val = 2;
  }
  
  message Task {
    message Args {
      string type = 1;
      string default = 2;
      string validation = 3;
    }

    map<string, Args> args = 1;
    map<string, string> const = 2;
    repeated string step = 3;
  }

  string name = 1;
  repeated Env envs = 2;
  map<string, Task> tasks = 3;
}

message RunOpsReq {
  string repositoryID = 1;
  string variableID = 2;
  string version = 3;
  string environment = 4;
  string task = 5;
  string args = 6;
}

message RunOpsRes {
  string jobID = 1;
}

service OpsService {
  rpc Ping(Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/ping"
    };
  }

  rpc ListRepository(ListRepositoryReq) returns (ListRepositoryRes) {
    option (google.api.http) = {
      get: "/v1/repository"
    };
  }

  rpc GetRepository(RepositoryID) returns (Repository) {
    option (google.api.http) = {
      get: "/v1/repository/{id}"
    };
  }

  rpc DelRepository(RepositoryID) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/repository/{id}"
    };
  }

  rpc PutRepository(Repository) returns (RepositoryID) {
    option (google.api.http) = {
      post: "/v1/repository"
      body: "*"
    };
  }

  rpc UpdateRepository(Repository) returns (Empty) {
    option (google.api.http) = {
      put: "/v1/repository/{id}"
      body: "*"
    };
  }

  rpc ListVariable(ListVariableReq) returns (ListVariableRes) {
    option (google.api.http) = {
      get: "/v1/variable"
    };
  }

  rpc GetVariable(VariableID) returns (Variable) {
    option (google.api.http) = {
      get: "/v1/variable/{id}"
    };
  }

  rpc DelVariable(VariableID) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/variable/{id}"
    };
  }

  rpc PutVariable(Variable) returns (VariableID) {
    option (google.api.http) = {
      post: "/v1/variable"
      body: "*"
    };
  }

  rpc UpdateVariable(Variable) returns (Empty) {
    option (google.api.http) = {
      put: "/v1/variable/{id}"
      body: "*"
    };
  }

  rpc ListJob(ListJobReq) returns (ListJobRes) {
    option (google.api.http) = {
      get: "/v1/job"
    };
  }

  rpc GetJob(JobID) returns (Job) {
    option (google.api.http) = {
      get: "/v1/job/{id}"
    };
  }

  rpc DelJob(JobID) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/job/{id}"
    };
  }

  rpc DescribeRepository(DescribeRepositoryReq) returns (Playbook) {
    option (google.api.http) = {
      post: "/v1/describeRepository"
      body: "*"
    };
  }

  rpc RunOps(RunOpsReq) returns (RunOpsRes) {
    option (google.api.http) = {
      post: "/v1/runOps"
      body: "*"
    };
  }
}
